search value,		Linear Search,		Binary Search,		Fibonacci Search,	Notes
1,			0m0.004s,		0m0.004s,		0m0.004s,		all search algorithms have same time. However I believe that fibonacci should be faster as it has a lower time complexity than linear search (as fibonacci splits the arrary, while linear goes through everything)
4,			0m0.004s,		0m0.004s,		0m0.003s,		only a little difference with fibonacci being the fastest. However I belive that fibonacci and linear should be the fastest with binary taking the longest because in this case the number we are searching for has the index at 0 so it chekcs the value immediately whereas binary starts from the middle of the array thus taking a longer time
22,			0m0.003s,		0m0.003s,		0m0.004s,		only a little difference as linear and binary are the fastest. However I believe that in thoery that linear and fibonacci search should be the fastest as the value we are searching for is at index 1 so we only need to check 1 value before getting the result whereas binary starts from the middle of the array thus takes a longer time
37,			0m0.028s,		0m0.004s,		0m0.003s,		linear is the slowest. However I believe that linear and fibonacci should be the fastest as the value we are searching for is at index 3 so it only needs to check one value before returning the result whereas binary search starts from the middle of the array thus takes longer 
22906,			0m0.003s,		0m0.004s,		0m0.004s,		only a little difference. However what should happen is that as the index positioning of the value we are searching for becomes a larger number linear becomes slower while binary and fibonacci search algorithms become faster. (this case the index is 2211)
53757,			0m0.004s,		0m0.003s,		0m0.003s,		only a little difference. However what should happen is that as the index positioning of the value we are searching for becomes a larger number linear becomes slower while binary and fibonacci search algorithms become faster (this case the index is 5231)
112591,			0m0.004s,		0m0.004s,		0m0.004s,		no difference. However what should happen is that as the index positioning of the value we are searching for becomes a larger number linear becomes slower while binary and fibonacci search algorithms become faster (in this case the index 11022
361940,			0m0.019s,		0m0.003s,		0m0.004s,		linear is the slowest. However what should happen is that fibonacci search becomes the fastest algorithm as it splits the array through addition and subtraction as opposed to division (which takes longer in itself vs addition/subtraction). With its index at 36000 it is a larger jump from the previous index of 11022
475713,			0m0.004s,		0m0.004s,		0m0.003s,		only a little difference. However what should happen is that fibonacci search becomes the fastest algorithm as it splits the array through addition and subtraction as opposed to division (which takes longer in itself vs addition/subtraction). Due to uneven splitting, 475713 is likely located somehwere in the array where the algorithm needs to do less splitting
893766,			0m0.004s,		0m0.004s,		0m0.004s,		no difference. However what should happen is that fibonacci search becomes the fastest algorithm as it splits the array through addition and subtraction as opposed to division (which takes longer in itself vs addition/subtraction). Due to uneven splitting, 893766 is likely located somehwere in the array where the algorithm needs to do less splitting
996637,			0m0.020s,		0m0.004s,		0m0.004s,		linear is the slowest. However what should happen is that fibonacci search becomes the fastest algorithm as it splits the array through addition and subtraction as opposed to division (which takes longer in itself vs addition/subtraction). Due to uneven splitting, 996637 is likely located somehwere in the array where the algorithm needs to do less splitting
996639,			0m0.004s,		0m0.003s,		0m0.003s,		only a little difference. However what should happen is that fibonacci search becomes the fastest algorithm as it splits the array through addition and subtraction as opposed to division (which takes longer in itself vs addition/subtraction). Due to uneven splitting, 996639 is likely located somehwere in the array where the algorithm needs to do less splitting
996652,			0m0.004s,		0m0.004s,		0m0.004s,		no difference. However what should happen is that binary and fibonacci are much faster than linear. This is because of the lower time complexity and the very large index position. In general, binary and fibonacci are much faster than linear
-996652,		0m0.004s,		0m0.004s,		0m0.004s,		no difference. However what should happen is that binary and fibonacci should be faster as it has a lower time complexity			
